# -----------------------------------------------------------------------------
# Getting Things GNOME! - a personal organizer for the GNOME desktop
# Copyright (c) 2008-2013 - Lionel Dricot & Bertrand Rousseau
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.
# -----------------------------------------------------------------------------
.ONESHELL:
SHELL = /bin/sh
INSTALL = /usr/bin/install -D
INSTALL644 = $(INSTALL) -m 644
CP = cp -v
MKDIR = mkdir -v

app_id = org.gnome.GTG
dev_id = $(app_id)Devel
version = 0.6.0
pkgname = gtg-$(version)

# Path vars relative to the builddir
builddir = .local_build
buildpkg = $(builddir)/GTG
plugindir = $(buildpkg)/plugins
sharedir = $(buildpkg)/share
localedir = $(sharedir)/locale
helpdir = $(sharedir)/help/C/gtg

distdir = dist

# Install dir vars
prefix = ~/.local
bindir = $(prefix)/bin
libdir = $(prefix)/lib/python3.9/site-packages/GTG
appsdir = $(prefix)/share/applications
icondir = $(prefix)/share/icons/hicolor/scalable/apps
installdirs = $(libdir) $(bindir) $(appsdir) $(icondir)

# Files used by GNOME for the desktop app entry
dev_gnome_files = $(icondir)/$(dev_id).svg $(appsdir)/$(dev_id).desktop

plugin_list = export send-email untouched-tasks urgency-color hamster dev_console gamify

# Replace '-' in plugin list with '_' to match dir names
plugin_dirs := $(addprefix GTG/plugins/,$(subst -,_,$(plugin_list)))

# Generate the full list of .gtg-plugin files for targets & prereq patterns
plugin_files := $(addsuffix .gtg-plugin,$(addprefix $(plugindir)/,$(plugin_list)))

# The locale lists for language abbreviations, .po files, LC_MESSAGES files
languages := $(shell sed '/^[[:space:]]*#/d' po/LINGUAS)
language_files := $(addsuffix .po,$(addprefix po/,$(languages)))
locale_files := $(addsuffix /LC_MESSAGES/gtg.mo,$(addprefix $(localedir)/,$(languages)))

gtgpot = po/gtg.pot

.PHONY: all
all : build

.PHONY: build
build : app locale assets scripts plugins metadata dev-gnome-files

.PHONY: rebuild
rebuild: clean build

# Check for coding standard violations & flakes.
.PHONY: check
check : tests lint

# Run all of the tests.
.PHONY: tests
tests :
	./run-tests

# Remove all build files, including symlink for dev icon & desktop files
.PHONY: clean
clean :
	rm -rf tmp/ $(builddir) $(dev_gnome_files)

# Check for common & easily catchable Python mistakes.
.PHONY: pyflakes
pyflakes :
	-python3 -m pyflakes GTG tests scripts run-tests

# Check for coding standard violations.
# Ignoring all blank line (E3) errors
.PHONY: pep8
pep8 :
	-python3 -m pycodestyle --statistics --count --repeat --max-line-length=100\
		--ignore=E128,E3 GTG tests scripts run-tests

.PHONY: lint
lint : pep8 pyflakes

# Common build directory target
$(builddir) :
	$(MKDIR) -p $(builddir)

# ------------------------------------------------------------------------------
# Plugin files generated by gettext
# ------------------------------------------------------------------------------
.PHONY: plugins
plugins : plugin-core $(plugin_files)

.PHONY: plugin-core
plugin-core :
	$(MKDIR) -p $(plugindir)
	$(CP) -r -t $(plugindir) $(plugin_dirs) GTG/plugins/__init__.py

$(plugin_files) : $(plugindir)/%.gtg-plugin : GTG/plugins/%.gtg-plugin.desktop
	msgfmt \
		--desktop \
		-d po \
		-o $@ \
		--template $< \
		--keyword=name \
		--keyword=short-description \
		--keyword=description

# ------------------------------------------------------------------------------
# Metadata files generated by gettext
# ------------------------------------------------------------------------------
.PHONY: metadata
metadata : \
	$(builddir)/$(app_id).desktop \
	$(builddir)/$(dev_id).appdata.xml \
	$(builddir)/$(dev_id).desktop

# Build the "prod" version of the .desktop file for install
$(builddir)/$(app_id).desktop : data/$(app_id).desktop.in.in | $(builddir)
	msgfmt \
		--desktop \
		-d po \
		--template $< \
		-o $@
	sed -i -e "s:@APP_ID@:$(app_id):" $@

$(builddir)/$(dev_id).appdata.xml : data/$(app_id).appdata.xml.in.in | $(builddir)
	msgfmt \
		--xml \
		-d po \
		--template $< \
		-o $@
	sed -i -e "s:@APP_ID@:$(dev_id):" $@

$(builddir)/$(dev_id).desktop : data/$(app_id).desktop.in.in | $(builddir)
	msgfmt \
		--desktop \
		-d po \
		--template $< \
		-o $@
	sed -i -e "s:@APP_ID@:$(dev_id):" $@

# ------------------------------------------------------------------------------
# Script files generated by replacing tokens with build vars
# ------------------------------------------------------------------------------
.PHONY: scripts
scripts : $(builddir)/gtg

$(builddir)/gtg : GTG/gtg.in
	$(INSTALL) -T $< $@
	sed -i \
		-e "s:@APP_ID@:$(dev_id):" \
		-e "s:@localedir@:$(subst $(builddir)/,,$(localedir)):" \
		-e "s:@local_build@:False:" \
		-e "s:@pythondir@:/usr/lib/python3.9/site-packages:" \
		$@

# ------------------------------------------------------------------------------
# Generate distribution tarball
# ------------------------------------------------------------------------------
.PHONY: dist
dist :
	git diff-index --quiet HEAD \
		|| echo 'WARNING: Repository has uncommitted changes that will not be '\
	'included in the dist tarball' >&2
	rm -rf $(distdir)
	$(MKDIR) -p $(distdir)/$(pkgname)
	git clone --shared . $(distdir)/$(pkgname)
	cd $(distdir)
	rm -rf $(pkgname)/.git*
	tar --xz -cf $(pkgname).tar.xz $(pkgname)
	rm -rf $(pkgname)
	sha256sum $(pkgname).tar.xz \
		| awk '{print $$1,$$2}' \
		>$(pkgname).tar.xz.sha256sum

# ------------------------------------------------------------------------------
# Localization files
# ------------------------------------------------------------------------------
.PHONY: locale
locale : $(locale_files)

# Generate the .mo files for the .po files registered in LINGUAS
$(locale_files) : $(localedir)/%/LC_MESSAGES/gtg.mo : po/%.po
	$(MKDIR) -p $(dir $@)
	msgfmt $< -o $@ || exit $$?

# Generate .pot file
.PHONY: gtg-pot
gtg-pot : $(gtgpot)

$(gtgpot) : po/POTFILES.in
	xgettext \
		--package-name=gtg \
		-f $< \
		-o $@ \
		--keyword=_ \
		--flag=g_markup_printf_escaped:1:c-format \
		--add-comments \
		--from-code=UTF-8 \
		--keyword=N_ \
		--keyword=short-description \
		--flag=g_error_new:3:c-format \
		--keyword=NC_:1c,2 \
		--flag=g_snprintf:3:c-format \
		--flag=g_set_error:4:c-format \
		--flag=NC_:2:pass-c-format \
		--flag=g_strdup_printf:1:c-format \
		--flag=g_dngettext:2:pass-c-format \
		--keyword=description \
		--flag=g_printerr:1:c-format \
		--keyword=C_:1c,2 \
		--keyword=name \
		--flag=g_sprintf:2:c-format \
		--flag=g_log:3:c-format \
		--keyword=g_dcgettext:2 \
		--keyword=_ \
		--keyword=g_dngettext:2,3 \
		--flag=N_:1:pass-c-format \
		--flag=g_string_append_printf:2:c-format \
		--flag=g_printf:1:c-format \
		--flag=C_:2:pass-c-format \
		--flag=g_string_printf:2:c-format \
		--flag=g_fprintf:2:c-format \
		--flag=g_print:1:c-format \
		--keyword=g_dpgettext2:2c,3

# Update .po translation files
.PHONY: gtg-update-po
gtg-update-po : $(language_files)
	for lang in $(languages)
	do
		msgmerge -q -o po/$$lang.po po/$$lang.po $(gtgpot) || exit $$?
	done

# Generate missing .po files
$(language_files) : po/%.po : | $(gtgpot)
	msginit -i $(gtgpot) -o $@ -l $* --no-translator

# ------------------------------------------------------------------------------
# Core application files
# ------------------------------------------------------------------------------
.PHONY: app
app : $(buildpkg)/core/info.py
	$(INSTALL644) -t $(buildpkg)/backends GTG/backends/*.py
	$(CP) -r -t $(buildpkg)/core GTG/core/*.py GTG/core/plugins
	$(CP) -r -t $(buildpkg) GTG/__init__.py GTG/gtk

$(buildpkg)/core/info.py : GTG/core/info.py.in
	$(INSTALL644) -T $< $@
	if ! which git ; then
		sed -i $@ -e "s/@VCS_TAG@/$(version)/"
	else
		sed -i $@ -e "s/@VCS_TAG@/`git describe --dirty`/"
	fi


# ------------------------------------------------------------------------------
# Application assets
# ------------------------------------------------------------------------------
.PHONY: assets
assets :
	$(MKDIR) -p $(sharedir)/icons
	$(CP) -r -t $(sharedir)/icons data/icons/hicolor
	$(MKDIR) -p $(helpdir)
	$(CP) -r -t $(helpdir) docs/user_manual/C/*
	$(INSTALL644) -t $(sharedir)/man/man1 docs/gtg.1

# ------------------------------------------------------------------------------
# GNOME desktop app entry files
# ------------------------------------------------------------------------------

# Copy then explicitly call update-desktop-database to pickup the desktop files
.PHONY: dev-gnome-files
dev-gnome-files: $(dev_gnome_files)
	update-desktop-database $(appsdir)

# Copy the dev_gnome_files so the desktop app icon shows for dev version
$(icondir)/$(dev_id).svg : data/icons/hicolor/scalable/apps/$(dev_id).svg | $(icondir)
	$(CP) $< $@

$(appsdir)/$(dev_id).desktop : $(builddir)/$(dev_id).desktop | $(appsdir)
	$(CP) $< $@

# ------------------------------------------------------------------------------
# Install application files
# ------------------------------------------------------------------------------

# Install GTG package, icons, and .desktop file
.PHONY: install
install : build | $(installdirs)
	$(CP) -r -t $(libdir) $(buildpkg)/*
	$(INSTALL) -t $(bindir) $(builddir)/gtg $(builddir)/$(app_id).desktop
	ln -s -v -f -t $(icondir) \
		$(shell realpath $(libdir))/share/icons/hicolor/scalable/apps/$(app_id).svg

# Pattern target to cover all install dir creation
$(installdirs) : % : | $(prefix)
	$(MKDIR) -p $@

$(prefix) :
	$(MKDIR) -p $@
